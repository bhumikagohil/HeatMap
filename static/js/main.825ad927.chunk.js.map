{"version":3,"sources":["Components/Cell.js","Components/WeekDay.js","Components/Month.js","Components/Calender.js","Components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","value","props","cellData","onCellClick","numberOfChanges","date","style","changesMade","backgroundColor","OverlayTrigger","placement","overlay","Tooltip","id","className","onClick","Days","0","1","2","3","4","5","6","WeekDay","index","Month","startDate","monthName","moment","add","format","colorRange","Calender","range","useState","change","number","clickedCell","setClickedCell","days","Math","abs","diff","cells","Array","from","weekDays","months","floor","map","item","object","changes","counts","Object","keys","find","key","changesOn26","changesOn7","type","holderId","productId","description","showDetails","Main","dateRange","Row","Card","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.825ad927.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Tooltip, OverlayTrigger } from \"react-bootstrap\";\r\n\r\nconst Cell = ({ cellData, onCellClick }) => {\r\n  const { numberOfChanges, date, changesMade } = cellData;\r\n\r\n  const setColor = (value) => {\r\n    if (value < 5) {\r\n      return \"#dce0e5\";\r\n    } else if (value < 7) {\r\n      return \"#fda08b\";\r\n    } else if (value <= 7 || value < 9) {\r\n      return \"#fc8d72\";\r\n    } else if (value <= 9 || value < 12) {\r\n      return \"#fc7759\";\r\n    } else if (value <= 12 || value < 16) {\r\n      return \"#fc6340\";\r\n    }\r\n  };\r\n  let style = {\r\n    backgroundColor: setColor(numberOfChanges),\r\n  };\r\n\r\n  const renderTooltip = (props) => (\r\n    <Tooltip id=\"button-tooltip\">{`${numberOfChanges} changes at ${props}`}</Tooltip>\r\n  );\r\n  return (\r\n    <OverlayTrigger placement=\"top\" overlay={renderTooltip(date)}>\r\n      <div\r\n        className=\"calender-cells-cell\"\r\n        style={style}\r\n        onClick={onCellClick}\r\n      ></div>\r\n    </OverlayTrigger>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\n\r\nconst Days = {\r\n  0: \"Sun\",\r\n  1: \"Mon\",\r\n  2: \"Tue\",\r\n  3: \"Wed\",\r\n  4: \"Thurs\",\r\n  5: \"Fri\",\r\n  6: \"Sat\",\r\n};\r\n\r\nconst WeekDay = ({ index }) => {\r\n  return <div className=\"calender-weekdays-weekday\">{Days[index]}</div>;\r\n};\r\n\r\nexport default WeekDay;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst Month = ({ startDate, index }) => {\r\n  let date = moment(startDate).add(index * 7, \"day\");\r\n  let monthName = date.format(\"MMM\");\r\n\r\n  return (\r\n    <div className={`calender-months-month ${monthName}`}>{monthName}</div>\r\n  );\r\n};\r\n\r\nexport default Month;\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport changes from \"./Data/changes.json\";\r\nimport changesOn26 from \"./Data/26-11-2020.json\";\r\nimport changesOn7 from \"./Data/07-01-2021.json\";\r\nimport Cell from \"./Cell\";\r\nimport WeekDay from \"./WeekDay\";\r\nimport Month from \"./Month\";\r\n\r\nconst colorRange = [\"#dce0e5\", \"#fda08b\", \"#fc8d72\", \"#fc7759\", \"#fc6340\"];\r\n\r\nconst Calender = ({ range }) => {\r\n  const [clickedCell, setClickedCell] = useState({\r\n    date: null,\r\n    change: [],\r\n    number: 0,\r\n  });\r\n\r\n  let days = Math.abs(range[0].diff(range[1], \"days\"));\r\n  let cells = Array.from(new Array(days));\r\n  let weekDays = Array.from(new Array(7));\r\n  let months = Array.from(new Array(Math.floor(days / 7)));\r\n\r\n  let startDate = range[0];\r\n\r\n  const showDetails = (date, number, change) => {\r\n    setClickedCell({ date: date, change: change, number: number });\r\n  };\r\n\r\n  return (\r\n    <div className=\"calender\">\r\n      <h1 className=\"title\">Change Heat Map</h1>\r\n      <div className=\"calender-months\">\r\n        {months.map((item, index) => (\r\n          <Month key={index} index={index} startDate={startDate} />\r\n        ))}\r\n      </div>\r\n      <div className=\"calender-body\">\r\n        <div className=\"calender-weekdays\">\r\n          {weekDays.map((item, index) => (\r\n            <WeekDay key={index} index={index} startDate={startDate} />\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"calender-cells\">\r\n          {cells.map((item, index) => {\r\n            let date = moment(startDate).add(index, \"day\");\r\n            let cellData = {\r\n              numberOfChanges: \"0\",\r\n              date: moment(date).format(\"MMMM Do YYYY\"),\r\n              changesMade: {},\r\n            };\r\n            let object = changes.counts;\r\n            (function () {\r\n              Object.keys(object).find((key) => {\r\n                if (key === moment(date).format(\"YYYY-MM-DD\")) {\r\n                  cellData.numberOfChanges = object[key];\r\n                  if (key === \"2020-11-26\") {\r\n                    cellData.changesMade = changesOn26;\r\n                  } else if (key === \"2021-01-07\") {\r\n                    cellData.changesMade = changesOn7;\r\n                  } else {\r\n                    cellData.changesMade = [\r\n                      {\r\n                        type: \"ADDED\",\r\n                        date: \"2020-11-26\",\r\n                        holderId: \"ABC\",\r\n                        productId: \"3ed59e50-572d-4883-ad0a-2282c786506e\",\r\n                        description:\r\n                          \"ABC added a new Residential Mortgages product named ABC Product 3\",\r\n                      },\r\n                    ];\r\n                  }\r\n                }\r\n              });\r\n            })();\r\n\r\n            return (\r\n              <Cell\r\n                key={index}\r\n                index={index}\r\n                cellData={cellData}\r\n                onCellClick={() =>\r\n                  showDetails(\r\n                    cellData.date,\r\n                    cellData.numberOfChanges,\r\n                    cellData.changesMade\r\n                  )\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"calender-footer\">\r\n        <div className=\"footer-label\">Less</div>\r\n\r\n        {colorRange.map((item, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"calender-cells-cell\"\r\n            style={{ backgroundColor: item }}\r\n          ></div>\r\n        ))}\r\n\r\n        <div className=\"footer-label\">More</div>\r\n      </div>\r\n      <div className=\"details\">\r\n        {clickedCell.number <= 0 ? (\r\n          <h2>Select a box to view changes for that date</h2>\r\n        ) : (\r\n          <>\r\n            <h2>{`Showing ${clickedCell.number} changes that occured ${clickedCell.date}`}</h2>\r\n            <ul>\r\n              {clickedCell.change.map((item, index) => {\r\n                return (\r\n                  <li key={index} className=\"list-item\">\r\n                    {item.description}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calender;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Row, Card, Col } from \"react-bootstrap\";\r\n\r\nimport Calender from \"./Calender\";\r\n\r\nfunction Main() {\r\n  let startDate = moment().add(-365, \"days\");\r\n  let dateRange = [startDate, moment()];\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Row>\r\n        <Card>\r\n          <Calender range={dateRange} />\r\n        </Card>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import Main from \"./Components/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}